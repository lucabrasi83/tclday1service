#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2016-2017 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#ALL THE CUSTOMIZATIONS REGARDING DATAPROCESSING SHOULD BE WRITTEN INTO service_customization.py FILE
#
"""
Tree Structure of Handled XPATH:

services
        |
        day1services
                    |
                    day1service
                               |
                               eem-scripts
                                          |
                                          eem-script
                                                    |
                                                    eem-cpu-threshold
                                                                     
Schema Representation:

/services/day1services/day1service/eem-scripts/eem-script/eem-cpu-threshold
"""

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr

from tclday0config.tclday0config_lib import getLocalObject
from tclday0config.tclday0config_lib import getDeviceObject
from tclday0config.tclday0config_lib import getCurrentObjectConfig
from tclday0config.tclday0config_lib import ServiceModelContext
from tclday0config.tclday0config_lib import getParentObject
from tclday0config.tclday0config_lib import log

#from servicemodel.controller import devices
from servicemodel.controller.devices.device import eem_script
import service_customization


class EemCpuThreshold(yang.AbstractYangServiceHandler):
    _instance = None

    def __init__(self):
        self.delete_pre_processor = service_customization.DeletePreProcessor()
        self.create_pre_processor = service_customization.CreatePreProcessor()
        self.opaque_args = {}

    def create(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.create_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'eem_cpu_threshold')

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = None

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['rising_threshold'] = config.get_field_value('rising_threshold')
        inputdict['rising_threshold_interval'] = config.get_field_value('rising_threshold_interval')
        inputdict['falling_threshold'] = config.get_field_value('falling_threshold')
        inputdict['falling_threshold_interval'] = config.get_field_value('falling_threshold_interval')
        inputdict['variable1'] = config.get_field_value('variable1')
        if inputdict.get('variable1') is None:
          inputdict['variable1'] = '$_syslog_msg'
        inputdict['variable2'] = config.get_field_value('variable2')
        if inputdict.get('variable2') is None:
          inputdict['variable2'] = '$_regexp_result'
        inputdict['variable3'] = config.get_field_value('variable3')
        if inputdict.get('variable3') is None:
          inputdict['variable3'] = '$id'
        # END OF FETCHING THE LEAF PARAMETERS

        _Gen_obj = getLocalObject(sdata, 'day1service')
        device_mgmt_ip_address = _Gen_obj.day1service.device_ip

        #Fetch Device Object
        dev = getDeviceObject(device_mgmt_ip_address, sdata)

        # START OF FETCHING THE PARENT KEY LEAF PARAMETERS
        inputkeydict['day1services_day1service_device_ip'] = sdata.getRcPath().split('/')[-4].split('=')[1]
        # END OF FETCHING THE PARENT KEY LEAF PARAMETERS

        #Use the custom methods to process the data
        service_customization.ServiceDataCustomization.process_service_create_data(smodelctx, sdata, dev, id=id, device=dev, parentobj=parentobj, inputdict=inputdict, inputkeydict=inputkeydict, config=config, hopaque=opaque_args)

        #Start of Device binding with python bindings
        #eem_script_object = devices.device.eem_script.eem_script()
        eem_script_object = eem_script.eem_script()
        #eem_script_eem_cpu_threshold_object = devices.device.eem_script.eem_cpu_threshold.eem_cpu_threshold()
        eem_script_eem_cpu_threshold_object = eem_script.eem_cpu_threshold.eem_cpu_threshold()
        eem_script_eem_cpu_threshold_object.rising_threshold = inputdict.get('rising_threshold')
        eem_script_eem_cpu_threshold_object.rising_threshold_interval = inputdict.get('rising_threshold_interval')
        eem_script_eem_cpu_threshold_object.falling_threshold = inputdict.get('falling_threshold')
        eem_script_eem_cpu_threshold_object.falling_threshold_interval = inputdict.get('falling_threshold_interval')
        eem_script_eem_cpu_threshold_object.variable1 = inputdict.get('variable1')
        eem_script_eem_cpu_threshold_object.variable2 = inputdict.get('variable2')
        eem_script_eem_cpu_threshold_object.variable3 = inputdict.get('variable3')


        #End of Device binding
        devbindobjs['eem_script_eem_cpu_threshold_object'] = eem_script_eem_cpu_threshold_object
        #Use the custom method to process/create payload
        service_customization.ServiceDataCustomization.process_service_device_bindings(smodelctx, sdata, dev, id=id, device=dev, inputdict=inputdict, inputkeydict=inputkeydict, parentobj=parentobj, config=config, devbindobjs=devbindobjs, hopaque=opaque_args)
        for dev_iterator in dev:
          if not yang.Sdk.dataExists(dev_iterator.url + '/l3features:eem-script'):
              yang.Sdk.createData(dev_iterator.url,'<eem-script/>', sdata.getSession(), False)


        eem_script_eem_cpu_threshold_object_payload = eem_script_eem_cpu_threshold_object.getxml(filter=True)
        #log('eem_script_eem_cpu_threshold_object_payload: %s' % (eem_script_eem_cpu_threshold_object_payload))
        for dev_iterator in dev:
          yang.Sdk.createData(dev_iterator.url+'/l3features:eem-script',eem_script_eem_cpu_threshold_object_payload, sdata.getSession(), True)

    def update(self, id, sdata):
        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'eem_cpu_threshold')
        opaque_args = self.opaque_args

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = None

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['rising_threshold'] = config.get_field_value('rising_threshold')
        inputdict['rising_threshold_interval'] = config.get_field_value('rising_threshold_interval')
        inputdict['falling_threshold'] = config.get_field_value('falling_threshold')
        inputdict['falling_threshold_interval'] = config.get_field_value('falling_threshold_interval')
        inputdict['variable1'] = config.get_field_value('variable1')
        if inputdict.get('variable1') is None:
          inputdict['variable1'] = '$_syslog_msg'
        inputdict['variable2'] = config.get_field_value('variable2')
        if inputdict.get('variable2') is None:
          inputdict['variable2'] = '$_regexp_result'
        inputdict['variable3'] = config.get_field_value('variable3')
        if inputdict.get('variable3') is None:
          inputdict['variable3'] = '$id'
        # END OF FETCHING THE LEAF PARAMETERS

        _Gen_obj = getLocalObject(sdata, 'day1service')
        device_mgmt_ip_address = _Gen_obj.day1service.device_ip

        #Fetch Device Object
        dev = getDeviceObject(device_mgmt_ip_address, sdata)

        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_update_data(smodelctx, sdata, id=id, dev=dev, parentobj=parentobj, config=config, hopaque=opaque_args, inputdict=inputdict)

    def delete(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.delete_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'eem_cpu_threshold')
        opaque_args = self.opaque_args

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = None

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['rising_threshold'] = config.get_field_value('rising_threshold')
        inputdict['rising_threshold_interval'] = config.get_field_value('rising_threshold_interval')
        inputdict['falling_threshold'] = config.get_field_value('falling_threshold')
        inputdict['falling_threshold_interval'] = config.get_field_value('falling_threshold_interval')
        inputdict['variable1'] = config.get_field_value('variable1')
        if inputdict.get('variable1') is None:
          inputdict['variable1'] = '$_syslog_msg'
        inputdict['variable2'] = config.get_field_value('variable2')
        if inputdict.get('variable2') is None:
          inputdict['variable2'] = '$_regexp_result'
        inputdict['variable3'] = config.get_field_value('variable3')
        if inputdict.get('variable3') is None:
          inputdict['variable3'] = '$id'
        # END OF FETCHING THE LEAF PARAMETERS

        _Gen_obj = getLocalObject(sdata, 'day1service')
        device_mgmt_ip_address = _Gen_obj.day1service.device_ip

        #Fetch Device Object
        dev = getDeviceObject(device_mgmt_ip_address, sdata)

        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_delete_data(smodelctx, sdata, id=id, dev=dev, parentobj=parentobj, config=config, hopaque=opaque_args, inputdict=inputdict)

    @staticmethod
    def getInstance():
        if(EemCpuThreshold._instance == None):
            EemCpuThreshold._instance = EemCpuThreshold()
        return EemCpuThreshold._instance

    def rollbackCreate(self, id, sdata):
        log('rollback: id = %s, sdata = %s' % (id, sdata))
        self.delete(id,sdata)

if __name__ == 'eem_cpu_threshold':
  from servicemodel.yang import YangServiceData
  sdata = YangServiceData()
  instance = EemCpuThreshold().getInstance()
  instance.create(None, sdata)
  instance.delete(None, sdata)
  instance.update(None, sdata)
