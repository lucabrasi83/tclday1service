#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2016-2017 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#ALL THE CUSTOMIZATIONS REGARDING DATAPROCESSING SHOULD BE WRITTEN INTO service_customization.py FILE
#
"""
Tree Structure of Handled XPATH:

services
        |
        day1services
                    |
                    day1service
                               |
                               dhcp-server
                                          
Schema Representation:

/services/day1services/day1service/dhcp-server
"""

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr

from tclday0config.tclday0config_lib import getLocalObject
from tclday0config.tclday0config_lib import getDeviceObject
from tclday0config.tclday0config_lib import getCurrentObjectConfig
from tclday0config.tclday0config_lib import ServiceModelContext
from tclday0config.tclday0config_lib import getParentObject
from tclday0config.tclday0config_lib import log

#from servicemodel.controller import devices
from servicemodel.controller.devices.device import dhcp_server 
import service_customization


class DhcpServer(yang.AbstractYangServiceHandler):
    _instance = None

    def __init__(self):
        self.delete_pre_processor = service_customization.DeletePreProcessor()
        self.create_pre_processor = service_customization.CreatePreProcessor()
        self.opaque_args = {}

    def create(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.create_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'dhcp_server')

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = None

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['pool_name'] = config.get_field_value('pool_name')
        inputdict['pool_vrf'] = config.get_field_value('pool_vrf')
        inputdict['network'] = config.get_field_value('network')
        inputdict['mask'] = config.get_field_value('mask')
        inputdict['domain_name'] = config.get_field_value('domain_name')
        inputdict['dhcp_server_ip'] = config.get_field_value('dhcp_server_ip')
        inputdict['dns_server_ip'] = config.get_field_value('dns_server_ip')
        inputdict['default_router'] = config.get_field_value('default_router')
        inputdict['interface_name'] = config.get_field_value('interface_name')
        inputdict['start_ip'] = config.get_field_value('start_ip')
        inputdict['end_ip'] = config.get_field_value('end_ip')
        inputdict['lease'] = config.get_field_value('lease')
        # END OF FETCHING THE LEAF PARAMETERS

        _Gen_obj = getLocalObject(sdata, 'day1service')
        device_mgmt_ip_address = _Gen_obj.day1service.device_ip

        #Fetch Device Object
        dev = getDeviceObject(device_mgmt_ip_address, sdata)

        # START OF FETCHING THE PARENT KEY LEAF PARAMETERS
        inputkeydict['day1services_day1service_device_ip'] = sdata.getRcPath().split('/')[-2].split('=')[1]
        # END OF FETCHING THE PARENT KEY LEAF PARAMETERS

        #Use the custom methods to process the data
        service_customization.ServiceDataCustomization.process_service_create_data(smodelctx, sdata, dev, id=id, device=dev, parentobj=parentobj, inputdict=inputdict, inputkeydict=inputkeydict, config=config, hopaque=opaque_args)

        #Start of Device binding with python bindings
        #dhcp_server_object = devices.device.dhcp_server.dhcp_server()
        dhcp_server_object = dhcp_server.dhcp_server()
        dhcp_server_object.pool_name = inputdict.get('pool_name')
        dhcp_server_object.pool_vrf = inputdict.get('pool_vrf')
        dhcp_server_object.network = inputdict.get('network')
        dhcp_server_object.mask = inputdict.get('mask')
        dhcp_server_object.domain_name = inputdict.get('domain_name')
        dhcp_server_object.dhcp_server_ip = inputdict.get('dhcp_server_ip')
        dhcp_server_object.dns_server_ip = inputdict.get('dns_server_ip')
        dhcp_server_object.default_router = inputdict.get('default_router')
        dhcp_server_object.interface_name = inputdict.get('interface_name')
        dhcp_server_object.start_ip = inputdict.get('start_ip')
        dhcp_server_object.end_ip = inputdict.get('end_ip')
        dhcp_server_object.lease = inputdict.get('lease')

        

        #End of Device binding
        devbindobjs['dhcp_server_object'] = dhcp_server_object
        #Use the custom method to process/create payload
        service_customization.ServiceDataCustomization.process_service_device_bindings(smodelctx, sdata, dev, id=id, device=dev, inputdict=inputdict, inputkeydict=inputkeydict, parentobj=parentobj, config=config, devbindobjs=devbindobjs, hopaque=opaque_args)

        dhcp_server_object_payload = dhcp_server_object.getxml(filter=True)
        #log('dhcp_server_object_payload: %s' % (dhcp_server_object_payload))
        for dev_iterator in dev:
          yang.Sdk.createData(dev_iterator.url+'',dhcp_server_object_payload, sdata.getSession(), True)

    def update(self, id, sdata):
        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'dhcp_server')
        opaque_args = self.opaque_args

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = None

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['pool_name'] = config.get_field_value('pool_name')
        inputdict['pool_vrf'] = config.get_field_value('pool_vrf')
        inputdict['network'] = config.get_field_value('network')
        inputdict['mask'] = config.get_field_value('mask')
        inputdict['domain_name'] = config.get_field_value('domain_name')
        inputdict['dhcp_server_ip'] = config.get_field_value('dhcp_server_ip')
        inputdict['dns_server_ip'] = config.get_field_value('dns_server_ip')
        inputdict['default_router'] = config.get_field_value('default_router')
        inputdict['interface_name'] = config.get_field_value('interface_name')
        inputdict['start_ip'] = config.get_field_value('start_ip')
        inputdict['end_ip'] = config.get_field_value('end_ip')
        inputdict['lease'] = config.get_field_value('lease')
        # END OF FETCHING THE LEAF PARAMETERS

        _Gen_obj = getLocalObject(sdata, 'day1service')
        device_mgmt_ip_address = _Gen_obj.day1service.device_ip

        #Fetch Device Object
        dev = getDeviceObject(device_mgmt_ip_address, sdata)

        prevconfig = util.parseXmlString(sdata.getPreviousPayload())

        prevconfigdhcp = prevconfig.dhcp_server

        #Start of Device binding with python bindings
        dhcp_server_object = dhcp_server.dhcp_server()
        dhcp_server_object.pool_name = prevconfigdhcp.get_field_value('pool_name')
        dhcp_server_object.pool_vrf = inputdict.get('pool_vrf')
        dhcp_server_object.network = inputdict.get('network')
        dhcp_server_object.mask = inputdict.get('mask')
        dhcp_server_object.domain_name = inputdict.get('domain_name')
        dhcp_server_object.dhcp_server_ip = inputdict.get('dhcp_server_ip')
        dhcp_server_object.dns_server_ip = inputdict.get('dns_server_ip')
        dhcp_server_object.default_router = inputdict.get('default_router')
        dhcp_server_object.interface_name = inputdict.get('interface_name')
        dhcp_server_object.start_ip = inputdict.get('start_ip')
        dhcp_server_object.end_ip = inputdict.get('end_ip')
        dhcp_server_object.lease = inputdict.get('lease')

        dhcp_server_object_payload = dhcp_server_object.getxml(filter=True)

        for dev_iterator in dev:
          yang.Sdk.createData(dev_iterator.url+'',dhcp_server_object_payload, sdata.getSession(), True)

        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_update_data(smodelctx, sdata, id=id, dev=dev, parentobj=parentobj, config=config, hopaque=opaque_args, inputdict=inputdict)

    def delete(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.delete_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'dhcp_server')
        opaque_args = self.opaque_args

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = None

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['pool_name'] = config.get_field_value('pool_name')
        inputdict['pool_vrf'] = config.get_field_value('pool_vrf')
        inputdict['network'] = config.get_field_value('network')
        inputdict['mask'] = config.get_field_value('mask')
        inputdict['domain_name'] = config.get_field_value('domain_name')
        inputdict['dhcp_server_ip'] = config.get_field_value('dhcp_server_ip')
        inputdict['dns_server_ip'] = config.get_field_value('dns_server_ip')
        inputdict['default_router'] = config.get_field_value('default_router')
        inputdict['interface_name'] = config.get_field_value('interface_name')
        inputdict['start_ip'] = config.get_field_value('start_ip')
        inputdict['end_ip'] = config.get_field_value('end_ip')
        inputdict['lease'] = config.get_field_value('lease')
        # END OF FETCHING THE LEAF PARAMETERS

        _Gen_obj = getLocalObject(sdata, 'day1service')
        device_mgmt_ip_address = _Gen_obj.day1service.device_ip

        #Fetch Device Object
        dev = getDeviceObject(device_mgmt_ip_address, sdata)

        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_delete_data(smodelctx, sdata, id=id, dev=dev, parentobj=parentobj, config=config, hopaque=opaque_args, inputdict=inputdict)

    @staticmethod
    def getInstance():
        if(DhcpServer._instance == None):
            DhcpServer._instance = DhcpServer()
        return DhcpServer._instance

    def rollbackCreate(self, id, sdata):
        log('rollback: id = %s, sdata = %s' % (id, sdata))
        self.delete(id,sdata)

if __name__ == 'dhcp_server':
  from servicemodel.yang import YangServiceData
  sdata = YangServiceData()
  instance = DhcpServer().getInstance()
  instance.create(None, sdata)
  instance.delete(None, sdata)
  instance.update(None, sdata)
