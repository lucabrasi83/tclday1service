#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#ALL THE CUSTOMIZATIONS REGARDING DATAPROCESSING SHOULD BE WRITTEN INTO service_customization.py FILE
#
"""
Tree Structure of Handled XPATH:

services
        |
        day1services
                    |
                    day1service
                               |
                               aaa
                                  
Schema Representation:

/services/day1services/day1service/aaa
"""

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr

from tclday0config.tclday0config_lib import getLocalObject
from tclday0config.tclday0config_lib import getDeviceObject
from tclday0config.tclday0config_lib import getCurrentObjectConfig
from tclday0config.tclday0config_lib import ServiceModelContext
from tclday0config.tclday0config_lib import getParentObject
from tclday0config.tclday0config_lib import log

from servicemodel.controller.devices.device import aaa_group 
import service_customization


class Aaa(yang.AbstractYangServiceHandler):
    _instance = None

    def __init__(self):
        self.delete_pre_processor = service_customization.DeletePreProcessor()
        self.create_pre_processor = service_customization.CreatePreProcessor()
        self.opaque_args = {}

    def create(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.create_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'aaa')

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = getParentObject(sdata)

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args
        vrf = None

        #rcpath =  util.get_parent_rcpath(sdata.getRcPath())
        #xml_output = yang.Sdk.getData(rcpath, '', sdata.getTaskId())
        #parentobj = util.parseXmlString(xml_output)
        if hasattr(parentobj.day1service,'vrf'):
            vrf = parentobj.day1service.vrf

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['tacacs_server_group'] = config.get_field_value('tacacs_server_group')
        inputdict['vrf'] = vrf
        inputdict['source_interface'] = config.get_field_value('source_interface')
        inputdict['aaa_new_model'] = config.get_field_value('aaa_new_model')
        if inputdict.get('aaa_new_model') is None:
          inputdict['aaa_new_model'] = 'False'
        # END OF FETCHING THE LEAF PARAMETERS

        _Gen_obj = getLocalObject(sdata, 'day1service')
        device_mgmt_ip_address = _Gen_obj.day1service.device_ip

        #Fetch Device Object
        dev = getDeviceObject(device_mgmt_ip_address, sdata)

        # START OF FETCHING THE PARENT KEY LEAF PARAMETERS
        inputkeydict['day1services_day1service_device_ip'] = sdata.getRcPath().split('/')[-2].split('=')[1]
        # END OF FETCHING THE PARENT KEY LEAF PARAMETERS

        #Use the custom methods to process the data
        service_customization.ServiceDataCustomization.process_service_create_data(smodelctx, sdata, dev, id=id, device=dev, parentobj=parentobj, inputdict=inputdict, inputkeydict=inputkeydict, config=config, hopaque=opaque_args)

        #Start of Device binding with python bindings
        aaa_group_object = aaa_group.aaa_group()
        aaa_group_object.tacacs_server_group = inputdict.get('tacacs_server_group')
        aaa_group_object.vrf = inputdict.get('vrf')
        aaa_group_object.source_interface = inputdict.get('source_interface')
        aaa_group_object.aaa_new_model = inputdict.get('aaa_new_model')


        #End of Device binding
        devbindobjs['aaa_group_object'] = aaa_group_object
        #Use the custom method to process/create payload
        service_customization.ServiceDataCustomization.process_service_device_bindings(smodelctx, sdata, dev, id=id, device=dev, inputdict=inputdict, inputkeydict=inputkeydict, parentobj=parentobj, config=config, devbindobjs=devbindobjs, hopaque=opaque_args)

        aaa_group_object_payload = aaa_group_object.getxml(filter=True)
        #log('aaa_group_object_payload: %s' % (aaa_group_object_payload))
        for dev_iterator in dev:
          yang.Sdk.createData(dev_iterator.url+'',aaa_group_object_payload, sdata.getSession(), True)

    def update(self, id, sdata):
        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'aaa')
        opaque_args = self.opaque_args

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = getParentObject(sdata)

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['tacacs_server_group'] = config.get_field_value('tacacs_server_group')
        inputdict['vrf'] = config.get_field_value('vrf')
        inputdict['source_interface'] = config.get_field_value('source_interface')
        inputdict['aaa_new_model'] = config.get_field_value('aaa_new_model')
        if inputdict.get('aaa_new_model') is None:
          inputdict['aaa_new_model'] = 'False'
        # END OF FETCHING THE LEAF PARAMETERS

        _Gen_obj = getLocalObject(sdata, 'day1service')
        device_mgmt_ip_address = _Gen_obj.day1service.device_ip

        #Fetch Device Object
        dev = getDeviceObject(device_mgmt_ip_address, sdata)

        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_update_data(smodelctx, sdata, id=id, dev=dev, parentobj=parentobj, config=config, hopaque=opaque_args, inputdict=inputdict)

    def delete(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.delete_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'aaa')
        opaque_args = self.opaque_args

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = getParentObject(sdata)

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['tacacs_server_group'] = config.get_field_value('tacacs_server_group')
        inputdict['vrf'] = config.get_field_value('vrf')
        inputdict['source_interface'] = config.get_field_value('source_interface')
        inputdict['aaa_new_model'] = config.get_field_value('aaa_new_model')
        if inputdict.get('aaa_new_model') is None:
          inputdict['aaa_new_model'] = 'False'
        # END OF FETCHING THE LEAF PARAMETERS

        _Gen_obj = getLocalObject(sdata, 'day1service')
        device_mgmt_ip_address = _Gen_obj.day1service.device_ip

        #Fetch Device Object
        dev = getDeviceObject(device_mgmt_ip_address, sdata)

        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_delete_data(smodelctx, sdata, id=id, dev=dev, parentobj=parentobj, config=config, hopaque=opaque_args, inputdict=inputdict)

    @staticmethod
    def getInstance():
        if(Aaa._instance == None):
            Aaa._instance = Aaa()
        return Aaa._instance

    def rollbackCreate(self, id, sdata):
        log('rollback: id = %s, sdata = %s' % (id, sdata))
        self.delete(id,sdata)

if __name__ == 'aaa':
  from servicemodel.yang import YangServiceData
  sdata = YangServiceData()
  instance = Aaa().getInstance()
  instance.create(None, sdata)
  instance.delete(None, sdata)
  instance.update(None, sdata)
