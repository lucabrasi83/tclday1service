#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#ALL THE CUSTOMIZATIONS REGARDING DATAPROCESSING SHOULD BE WRITTEN INTO service_customization.py FILE
#
"""
Tree Structure of Handled XPATH:

services
        |
        day1services
                    |
                    day1service
                               |
                               vty-conf
                                       |
                                       vty
                                          
Schema Representation:

/services/day1services/day1service/vty-conf/vty
"""

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr

from tclday0config.tclday0config_lib import getLocalObject
from tclday0config.tclday0config_lib import getDeviceObject
from tclday0config.tclday0config_lib import getCurrentObjectConfig
from tclday0config.tclday0config_lib import ServiceModelContext
from tclday0config.tclday0config_lib import getParentObject
from tclday0config.tclday0config_lib import log

#from servicemodel.controller import devices
from servicemodel.controller.devices.device import vty_configs
import service_customization


class Vty(yang.AbstractYangServiceHandler):
    _instance = None

    def __init__(self):
        self.delete_pre_processor = service_customization.DeletePreProcessor()
        self.create_pre_processor = service_customization.CreatePreProcessor()
        self.opaque_args = {}

    def create(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.create_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'vty')

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        #parentobj = None

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        vrf = None
        rcpath =  util.get_parent_rcpath(sdata.getRcPath(),level=2)
        xml_output = yang.Sdk.getData(rcpath, '', sdata.getTaskId())
        parentobj = util.parseXmlString(xml_output)
        if hasattr(parentobj.day1service,'vrf'):
            vrf = parentobj.day1service.vrf

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['name'] = config.get_field_value('name')
        inputdict['timeout_in_sec'] = config.get_field_value('timeout_in_sec')
        if inputdict.get('timeout_in_sec') is None:
          inputdict['timeout_in_sec'] = '0'
        inputdict['timeout_in_min'] = config.get_field_value('timeout_in_min')
        if inputdict.get('timeout_in_min') is None:
          inputdict['timeout_in_min'] = '30'
        inputdict['min_vty'] = config.get_field_value('min_vty')
        if inputdict.get('min_vty') is None:
          inputdict['min_vty'] = '0'
        inputdict['max_vty'] = config.get_field_value('max_vty')
        if inputdict.get('max_vty') is None:
          inputdict['max_vty'] = '4'
        inputdict['transport_type'] = config.get_field_value('transport_type')
        if inputdict['transport_type'] is None:
          inputdict['transport_type'] = 'telnet ssh'
        inputdict['acl'] = config.get_field_value('acl')
        inputdict['logging_synchronous'] = config.get_field_value('logging_synchronous')
        if inputdict.get('logging_synchronous') is None:
          inputdict['logging_synchronous'] = 'False'
        inputdict['history_size'] = config.get_field_value('history_size')
        inputdict['no_privilege_level'] = config.get_field_value('no_privilege_level')
        inputdict['no_password'] = config.get_field_value('no_password')
        inputdict['auth_type'] = config.get_field_value('auth_type')
        inputdict['vrf_also'] = config.get_field_value('vrf_also')
        # END OF FETCHING THE LEAF PARAMETERS

        _Gen_obj = getLocalObject(sdata, 'day1service')
        device_mgmt_ip_address = _Gen_obj.day1service.device_ip

        #Fetch Device Object
        dev = getDeviceObject(device_mgmt_ip_address, sdata)

        # START OF FETCHING THE PARENT KEY LEAF PARAMETERS
        inputkeydict['day1services_day1service_device_ip'] = sdata.getRcPath().split('/')[-3].split('=')[1]
        # END OF FETCHING THE PARENT KEY LEAF PARAMETERS

        #Use the custom methods to process the data
        service_customization.ServiceDataCustomization.process_service_create_data(smodelctx, sdata, dev, id=id, device=dev, parentobj=parentobj, inputdict=inputdict, inputkeydict=inputkeydict, config=config, hopaque=opaque_args)

        #Start of Device binding with python bindings
        #vty_configs_object = devices.device.vty_configs.vty_configs()
        vty_configs_object = vty_configs.vty_configs()
        if util.isNotEmpty(inputdict.get('name')):
          #vty_configs_vty_config_object = devices.device.vty_configs.vty_config.vty_config()
          vty_configs_vty_config_object = vty_configs.vty_config.vty_config()
          vty_configs_vty_config_object.name = "line vty " + inputdict.get('min_vty') + " " + inputdict.get('max_vty')
          vty_configs_vty_config_object.min_vty = inputdict.get('min_vty')
          vty_configs_vty_config_object.max_vty = inputdict.get('max_vty')
          vty_configs_vty_config_object.acl_rule_number = inputdict.get('acl')
          vty_configs_vty_config_object.timeout = inputdict.get('timeout_in_min')
          vty_configs_vty_config_object.transport_types_in = inputdict.get('transport_type')
          vty_configs_vty_config_object.logging_synchronous = inputdict.get('logging_synchronous')
          vty_configs_vty_config_object.history_size = inputdict.get('history_size')
          vty_configs_vty_config_object.no_privilege_level = inputdict.get('no_privilege_level')
          if util.isNotEmpty(inputdict['no_privilege_level']):
              vty_configs_vty_config_object.privilege_level._empty_tag = True
          vty_configs_vty_config_object.no_password = inputdict.get('no_password')
          if inputdict.get('vrf_also') == 'true':
            vty_configs_vty_config_object.vrf = 'vrf-also'
          vty_configs_vty_config_object.auth_type = inputdict.get('auth_type')


        #End of Device binding
        devbindobjs['vty_configs_vty_config_object'] = vty_configs_vty_config_object
        #Use the custom method to process/create payload
        service_customization.ServiceDataCustomization.process_service_device_bindings(smodelctx, sdata, dev, id=id, device=dev, inputdict=inputdict, inputkeydict=inputkeydict, parentobj=parentobj, config=config, devbindobjs=devbindobjs, hopaque=opaque_args)
        #for dev_iterator in dev:
          #yang.Sdk.createData(dev_iterator.url,'<vty-configs/>', sdata.getSession(), True)


        vty_configs_vty_config_object_payload = vty_configs_vty_config_object.getxml(filter=True)
        #log('vty_configs_vty_config_object_payload: %s' % (vty_configs_vty_config_object_payload))
        for dev_iterator in dev:
          yang.Sdk.createData(dev_iterator.url+'/basicDeviceConfigs:vty-configs',vty_configs_vty_config_object_payload, sdata.getSession(), True)

    def update(self, id, sdata):
        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'vty')
        opaque_args = self.opaque_args

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = None

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['name'] = config.get_field_value('name')
        inputdict['timeout_in_sec'] = config.get_field_value('timeout_in_sec')
        if inputdict.get('timeout_in_sec') is None:
          inputdict['timeout_in_sec'] = '0'
        inputdict['timeout_in_min'] = config.get_field_value('timeout_in_min')
        if inputdict.get('timeout_in_min') is None:
          inputdict['timeout_in_min'] = '30'
        inputdict['min_vty'] = config.get_field_value('min_vty')
        if inputdict.get('min_vty') is None:
          inputdict['min_vty'] = '0'
        inputdict['max_vty'] = config.get_field_value('max_vty')
        if inputdict.get('max_vty') is None:
          inputdict['max_vty'] = '4'
        inputdict['transport_type'] = config.get_field_value('transport_type')
        if inputdict['transport_type'] is None:
          inputdict['transport_type'] = 'telnet ssh'
        inputdict['acl'] = config.get_field_value('acl')
        inputdict['logging_synchronous'] = config.get_field_value('logging_synchronous')
        if inputdict.get('logging_synchronous') is None:
          inputdict['logging_synchronous'] = 'False'
        inputdict['history_size'] = config.get_field_value('history_size')
        inputdict['vrf_also'] = config.get_field_value('vrf_also')
        inputdict['no_privilege_level'] = config.get_field_value('no_privilege_level')
        inputdict['no_password'] = config.get_field_value('no_password')
        # END OF FETCHING THE LEAF PARAMETERS

        _Gen_obj = getLocalObject(sdata, 'day1service')
        device_mgmt_ip_address = _Gen_obj.day1service.device_ip

        #Fetch Device Object
        dev = getDeviceObject(device_mgmt_ip_address, sdata)

        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_update_data(smodelctx, sdata, id=id, dev=dev, parentobj=parentobj, config=config, hopaque=opaque_args, inputdict=inputdict)

    def delete(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.delete_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'vty')
        opaque_args = self.opaque_args

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = None

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['name'] = config.get_field_value('name')
        inputdict['timeout_in_sec'] = config.get_field_value('timeout_in_sec')
        if inputdict.get('timeout_in_sec') is None:
          inputdict['timeout_in_sec'] = '0'
        inputdict['timeout_in_min'] = config.get_field_value('timeout_in_min')
        if inputdict.get('timeout_in_min') is None:
          inputdict['timeout_in_min'] = '30'
        inputdict['min_vty'] = config.get_field_value('min_vty')
        if inputdict.get('min_vty') is None:
          inputdict['min_vty'] = '0'
        inputdict['max_vty'] = config.get_field_value('max_vty')
        if inputdict.get('max_vty') is None:
          inputdict['max_vty'] = '4'
        inputdict['transport_type'] = config.get_field_value('transport_type')
        if inputdict['transport_type'] is None:
          inputdict['transport_type'] = 'telnet ssh'
        inputdict['acl'] = config.get_field_value('acl')
        inputdict['logging_synchronous'] = config.get_field_value('logging_synchronous')
        if inputdict.get('logging_synchronous') is None:
          inputdict['logging_synchronous'] = 'False'
        inputdict['history_size'] = config.get_field_value('history_size')
        inputdict['vrf_also'] = config.get_field_value('vrf_also')
        inputdict['no_privilege_level'] = config.get_field_value('no_privilege_level')
        inputdict['no_password'] = config.get_field_value('no_password')
        # END OF FETCHING THE LEAF PARAMETERS

        _Gen_obj = getLocalObject(sdata, 'day1service')
        device_mgmt_ip_address = _Gen_obj.day1service.device_ip

        #Fetch Device Object
        dev = getDeviceObject(device_mgmt_ip_address, sdata)

        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_delete_data(smodelctx, sdata, id=id, dev=dev, parentobj=parentobj, config=config, hopaque=opaque_args, inputdict=inputdict)

    @staticmethod
    def getInstance():
        if(Vty._instance == None):
            Vty._instance = Vty()
        return Vty._instance

    def rollbackCreate(self, id, sdata):
        log('rollback: id = %s, sdata = %s' % (id, sdata))
        self.delete(id,sdata)

if __name__ == 'vty':
  from servicemodel.yang import YangServiceData
  sdata = YangServiceData()
  instance = Vty().getInstance()
  instance.create(None, sdata)
  instance.delete(None, sdata)
  instance.update(None, sdata)
