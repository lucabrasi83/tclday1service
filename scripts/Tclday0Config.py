#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2016-2017 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#ALL THE CUSTOMIZATIONS REGARDING DATAPROCESSING SHOULD BE WRITTEN INTO service_customization.py FILE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from tclday0config_lib import getCurrentObjectConfig
import day1services.day1service.day1service
import day1services.day1service.snmp.snmp
import day1services.day1service.snmp.snmp_community.snmp_community
import day1services.day1service.snmp.snmp_host.snmp_host
import day1services.day1service.snmp.snmp_traps.snmp_traps
import day1services.day1service.snmp.snmp_mib.snmp_mib
import day1services.day1service.clock.clock
import day1services.day1service.banner.banner
import day1services.day1service.ntp.ntp
import day1services.day1service.ntp.ntp_server.ntp_server
import day1services.day1service.syslog.syslog
import day1services.day1service.syslog.logging_host.logging_host
import day1services.day1service.service_timestamps.service_timestamps
import day1services.day1service.vty_conf.vty.vty
import day1services.day1service.named_access_lists.acl.acl
import day1services.day1service.named_access_lists.acl.match_condition.match_condition
import day1services.day1service.console.console
import day1services.day1service.eem_scripts.eem_script.eem_if_errors.interface.interface
import day1services.day1service.eem_scripts.eem_script.eem_bgp_adj.eem_bgp_adj
import day1services.day1service.eem_scripts.eem_script.eem_eigrp_adj.eem_eigrp_adj
import day1services.day1service.eem_scripts.eem_script.eem_ospf_adj.eem_ospf_adj
import day1services.day1service.eem_scripts.eem_script.eem_cpu_threshold.eem_cpu_threshold
import day1services.day1service.eem_scripts.eem_script.eem_mem_threshold.eem_mem_threshold
import day1services.day1service.eem_scripts.eem_script.eem_zscaler.eem_zscaler
import day1services.day1service.class_maps.class_map.class_map
import day1services.day1service.policy_maps.policy_map.policy_map
import day1services.day1service.policy_maps.policy_map.class_entry.class_entry
import day1services.day1service.auxiliary_port.auxiliary_port
import day1services.day1service.features.features
import day1services.day1service.aaa.aaa
import day1services.day1service.aaa.aaa_servers_private.aaa_servers_private
import day1services.day1service.tacacs.tacacs
import day1services.day1service.hostname.hostname
import day1services.day1service.license.license
import day1services.day1service.dns.dns
import day1services.day1service.dns.name_server.name_server
import day1services.day1service.call_home.call_home
import day1services.day1service.ssh.ssh
import day1services.day1service.tftp.tftp
import day1services.day1service.netflow.netflow.flow_exports.flow_exports
import day1services.day1service.netflow.netflow.flow_exports.destinations.destinations
import day1services.day1service.netflow.netflow.flow_exports.flow_export.flow_export
import day1services.day1service.netflow.netflow.flow_exports.flow_export.options.options
import day1services.day1service.netflow.netflow.flow_records.flow_record.flow_record
import day1services.day1service.netflow.netflow.flow_records.flow_record.collect.ipv4.ipv4_options.ipv4_options
import day1services.day1service.netflow.netflow.flow_records.flow_record.collect.interface.interface_options.interface_options
import day1services.day1service.netflow.netflow.flow_records.flow_record.collect.application.application_options.application_options
import day1services.day1service.netflow.netflow.flow_records.flow_record.collect.counter.counter_options.counter_options
import day1services.day1service.netflow.netflow.flow_records.flow_record.collect.art.art_options.art_options
import day1services.day1service.netflow.netflow.flow_records.flow_record.collect.transport.transport_options.transport_options
import day1services.day1service.netflow.netflow.flow_records.flow_record.collect.timestamp.timestamp_options.timestamp_options
import day1services.day1service.netflow.netflow.flow_monitors.flow_monitor.flow_monitor
import day1services.day1service.netflow.netflow.flow_monitors.flow_monitor.exporters.exporter.exporter
import day1services.day1service.netflow.netflow.flow_monitors.flow_monitor.cache.timeout.timeout
import day1services.day1service.netflow.netflow.flow_monitors.flow_monitor.cache.entries.entries
import day1services.day1service.netflow.netflow.flow_monitors.flow_monitor.interfaces.interface.interface
import day1services.day1service.local_credentials.local_credential.local_credential
import day1services.day1service.dhcp_server.dhcp_server
import day1services.day1service.dhcp_server.dhcp_pools.dhcp_pool.dhcp_pool
import day1services.day1service.dhcp_server.excluded_address.excluded_address
import day1services.day1service.tacacs_user_connectivity.tacacs_user_credentials.tacacs_user_credentials
import day1services.day1service.cpe_finalize.cpe_finalize

class TCLDAY0CONFIGService(yang.AbstractYangServiceHandler):
    """Class for handling tclday0config service creation request. 
    """
    _instance = None

    def create(self, id, sdata):
        config = getCurrentObjectConfig(id, sdata, None)

    def __init__(self):
        yang.AbstractYangServiceHandler.__init__(self)
        self.handler_map = {
            'tclday0config:day1services/day1service': day1services.day1service.day1service.Day1Service.getInstance(),
            'tclday0config:day1services/day1service/snmp': day1services.day1service.snmp.snmp.Snmp.getInstance(),
            'tclday0config:day1services/day1service/snmp/snmp-community': day1services.day1service.snmp.snmp_community.snmp_community.SnmpCommunity.getInstance(),
            'tclday0config:day1services/day1service/snmp/snmp-host': day1services.day1service.snmp.snmp_host.snmp_host.SnmpHost.getInstance(),
            'tclday0config:day1services/day1service/snmp/snmp-traps': day1services.day1service.snmp.snmp_traps.snmp_traps.SnmpTraps.getInstance(),
            'tclday0config:day1services/day1service/snmp/snmp-mib': day1services.day1service.snmp.snmp_mib.snmp_mib.SnmpMib.getInstance(),
            'tclday0config:day1services/day1service/clock': day1services.day1service.clock.clock.Clock.getInstance(),
            'tclday0config:day1services/day1service/banner': day1services.day1service.banner.banner.Banner.getInstance(),
            'tclday0config:day1services/day1service/ntp': day1services.day1service.ntp.ntp.Ntp.getInstance(),
            'tclday0config:day1services/day1service/ntp/ntp-server': day1services.day1service.ntp.ntp_server.ntp_server.NtpServer.getInstance(),
            'tclday0config:day1services/day1service/syslog': day1services.day1service.syslog.syslog.Syslog.getInstance(),
            'tclday0config:day1services/day1service/syslog/logging-host': day1services.day1service.syslog.logging_host.logging_host.LoggingHost.getInstance(),
            'tclday0config:day1services/day1service/service-timestamps': day1services.day1service.service_timestamps.service_timestamps.ServiceTimestamps.getInstance(),
            'tclday0config:day1services/day1service/vty-conf/vty': day1services.day1service.vty_conf.vty.vty.Vty.getInstance(),
            'tclday0config:day1services/day1service/named-access-lists/acl': day1services.day1service.named_access_lists.acl.acl.Acl.getInstance(),
            'tclday0config:day1services/day1service/named-access-lists/acl/match-condition': day1services.day1service.named_access_lists.acl.match_condition.match_condition.MatchCondition.getInstance(),
            'tclday0config:day1services/day1service/console': day1services.day1service.console.console.Console.getInstance(),
            'tclday0config:day1services/day1service/eem-scripts/eem-script/eem-if-errors/interface': day1services.day1service.eem_scripts.eem_script.eem_if_errors.interface.interface.Interface.getInstance(),
            'tclday0config:day1services/day1service/eem-scripts/eem-script/eem-bgp-adj': day1services.day1service.eem_scripts.eem_script.eem_bgp_adj.eem_bgp_adj.EemBgpAdj.getInstance(),
            'tclday0config:day1services/day1service/eem-scripts/eem-script/eem-eigrp-adj': day1services.day1service.eem_scripts.eem_script.eem_eigrp_adj.eem_eigrp_adj.EemEigrpAdj.getInstance(),
            'tclday0config:day1services/day1service/eem-scripts/eem-script/eem-ospf-adj': day1services.day1service.eem_scripts.eem_script.eem_ospf_adj.eem_ospf_adj.EemOspfAdj.getInstance(),
            'tclday0config:day1services/day1service/eem-scripts/eem-script/eem-cpu-threshold': day1services.day1service.eem_scripts.eem_script.eem_cpu_threshold.eem_cpu_threshold.EemCpuThreshold.getInstance(),
            'tclday0config:day1services/day1service/eem-scripts/eem-script/eem-mem-threshold': day1services.day1service.eem_scripts.eem_script.eem_mem_threshold.eem_mem_threshold.EemMemThreshold.getInstance(),
            'tclday0config:day1services/day1service/eem-scripts/eem-script/eem-zscaler': day1services.day1service.eem_scripts.eem_script.eem_zscaler.eem_zscaler.EemZscaler.getInstance(),
            'tclday0config:day1services/day1service/class-maps/class-map': day1services.day1service.class_maps.class_map.class_map.ClassMap.getInstance(),
            'tclday0config:day1services/day1service/policy-maps/policy-map': day1services.day1service.policy_maps.policy_map.policy_map.PolicyMap.getInstance(),
            'tclday0config:day1services/day1service/policy-maps/policy-map/class-entry': day1services.day1service.policy_maps.policy_map.class_entry.class_entry.ClassEntry.getInstance(),
            'tclday0config:day1services/day1service/auxiliary-port': day1services.day1service.auxiliary_port.auxiliary_port.AuxiliaryPort.getInstance(),
            'tclday0config:day1services/day1service/features': day1services.day1service.features.features.Features.getInstance(),
            'tclday0config:day1services/day1service/aaa': day1services.day1service.aaa.aaa.Aaa.getInstance(),
            'tclday0config:day1services/day1service/aaa/aaa-servers-private': day1services.day1service.aaa.aaa_servers_private.aaa_servers_private.AaaServersPrivate.getInstance(),
            'tclday0config:day1services/day1service/tacacs': day1services.day1service.tacacs.tacacs.Tacacs.getInstance(),
            'tclday0config:day1services/day1service/hostname': day1services.day1service.hostname.hostname.Hostname.getInstance(),
            'tclday0config:day1services/day1service/license': day1services.day1service.license.license.License.getInstance(),
            'tclday0config:day1services/day1service/dns': day1services.day1service.dns.dns.Dns.getInstance(),
            'tclday0config:day1services/day1service/dns/name-server': day1services.day1service.dns.name_server.name_server.NameServer.getInstance(),
            'tclday0config:day1services/day1service/call-home': day1services.day1service.call_home.call_home.CallHome.getInstance(),
            'tclday0config:day1services/day1service/ssh': day1services.day1service.ssh.ssh.Ssh.getInstance(),
            'tclday0config:day1services/day1service/tftp': day1services.day1service.tftp.tftp.Tftp.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-exports': day1services.day1service.netflow.netflow.flow_exports.flow_exports.FlowExports.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-exports/destinations': day1services.day1service.netflow.netflow.flow_exports.destinations.destinations.Destinations.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-exports/flow-export': day1services.day1service.netflow.netflow.flow_exports.flow_export.flow_export.FlowExport.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-exports/flow-export/options': day1services.day1service.netflow.netflow.flow_exports.flow_export.options.options.Options.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-records/flow-record': day1services.day1service.netflow.netflow.flow_records.flow_record.flow_record.FlowRecord.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-records/flow-record/collect/ipv4/ipv4-options': day1services.day1service.netflow.netflow.flow_records.flow_record.collect.ipv4.ipv4_options.ipv4_options.Ipv4Options.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-records/flow-record/collect/interface/interface-options': day1services.day1service.netflow.netflow.flow_records.flow_record.collect.interface.interface_options.interface_options.InterfaceOptions.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-records/flow-record/collect/application/application-options': day1services.day1service.netflow.netflow.flow_records.flow_record.collect.application.application_options.application_options.ApplicationOptions.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-records/flow-record/collect/counter/counter-options': day1services.day1service.netflow.netflow.flow_records.flow_record.collect.counter.counter_options.counter_options.CounterOptions.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-records/flow-record/collect/art/art-options': day1services.day1service.netflow.netflow.flow_records.flow_record.collect.art.art_options.art_options.ArtOptions.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-records/flow-record/collect/transport/transport-options': day1services.day1service.netflow.netflow.flow_records.flow_record.collect.transport.transport_options.transport_options.TransportOptions.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-records/flow-record/collect/timestamp/timestamp-options': day1services.day1service.netflow.netflow.flow_records.flow_record.collect.timestamp.timestamp_options.timestamp_options.TimestampOptions.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-monitors/flow-monitor': day1services.day1service.netflow.netflow.flow_monitors.flow_monitor.flow_monitor.FlowMonitor.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-monitors/flow-monitor/exporters/exporter': day1services.day1service.netflow.netflow.flow_monitors.flow_monitor.exporters.exporter.exporter.Exporter.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-monitors/flow-monitor/cache/timeout': day1services.day1service.netflow.netflow.flow_monitors.flow_monitor.cache.timeout.timeout.Timeout.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-monitors/flow-monitor/cache/entries': day1services.day1service.netflow.netflow.flow_monitors.flow_monitor.cache.entries.entries.Entries.getInstance(),
            'tclday0config:day1services/day1service/netflow/netflow/flow-monitors/flow-monitor/interfaces/interface': day1services.day1service.netflow.netflow.flow_monitors.flow_monitor.interfaces.interface.interface.Interface.getInstance(),
            'tclday0config:day1services/day1service/local-credentials/local-credential': day1services.day1service.local_credentials.local_credential.local_credential.LocalCredential.getInstance(),
            'tclday0config:day1services/day1service/cpe-finalize': day1services.day1service.cpe_finalize.cpe_finalize.CpeFinalize.getInstance(),
            'tclday0config:day1services/day1service/dhcp-server': day1services.day1service.dhcp_server.dhcp_server.DhcpServer.getInstance(),
            'tclday0config:day1services/day1service/dhcp-server/excluded-address': day1services.day1service.dhcp_server.excluded_address.excluded_address.ExcludedAddress.getInstance(),
            'tclday0config:day1services/day1service/tacacs-user-connectivity/tacacs-user-credentials': day1services.day1service.tacacs_user_connectivity.tacacs_user_credentials.tacacs_user_credentials.TacacsUserCredentials.getInstance(),
            'tclday0config:day1services/day1service/dhcp-server/dhcp-pools/dhcp-pool': day1services.day1service.dhcp_server.dhcp_pools.dhcp_pool.dhcp_pool.DhcpPool.getInstance()
        }

    @staticmethod
    def getInstance():
        if(TCLDAY0CONFIGService._instance is None):
            TCLDAY0CONFIGService._instance = TCLDAY0CONFIGService()
        return TCLDAY0CONFIGService._instance
